{"version":3,"sources":["pages/Input.js","pages/List.js","pages/TodoList.js","index.js"],"names":["Input","ref","this","props","refs","value","type","onChange","onClick","addTodo","React","Component","List","renderTodos","TodoList","handleChange","e","setState","inpValue","target","state","todos","title","done","delTodo","idx","filter","item","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","setItem","inp","input","ReactDOM","render","document","getElementById"],"mappings":"6KAaeA,E,uKATP,OACI,6BACI,2BAAOC,IAAKC,KAAKC,MAAMC,KAAMC,MAAOH,KAAKC,MAAME,MAAOC,KAAK,OAAOC,SAAUL,KAAKC,MAAMI,WACvF,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GALIC,IAAMC,WCkBXC,E,uKAfP,OACI,6BACI,wDACA,4BACKV,KAAKC,MAAMU,aAAY,IAE5B,wDACA,4BACKX,KAAKC,MAAMU,aAAY,S,GAXzBH,IAAMC,WC2EVG,E,kDAvEX,aAAc,IAAD,8BACT,gBAMJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,SAASF,EAAEG,OAAOd,SARxB,EAiBbI,QAAU,WACmB,IAAtB,EAAKW,MAAMF,UAGd,EAAKD,SAAS,CACVI,MAAM,CACF,CACIC,MAAO,EAAKF,MAAMF,SAClBK,MAAM,IAHT,mBAKE,EAAKH,MAAMC,WA3Bb,EA+BbG,QAAU,SAACC,GACP,EAAKR,SAAS,CACVI,MAAO,EAAKD,MAAMC,MAAMK,QAAO,SAACC,EAAKC,GAAN,OAAcA,GAAOH,QAjC/C,EAoCbI,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKb,MAAMC,QACpDS,EAASF,GAAOL,MAAQO,EAASF,GAAOL,KACxC,EAAKN,SAAS,CACVI,MAAOS,KAxCF,EA2CbjB,YAAc,SAACU,GACX,OAAO,EAAKH,MAAMC,MAAMa,KAAI,SAACC,EAAKV,GAC9B,GAAGF,GAAMY,EAAKZ,KACV,OAAO,4BACH,2BACIf,QAAS,kBAAI,EAAKqB,OAAOJ,IACzBW,QAASb,EACTjB,KAAK,aAET,0BAAM+B,wBAAyB,CAACC,OAAOH,EAAKb,SAC5C,4BAAQd,QAAS,kBAAI,EAAKgB,QAAQC,KAAlC,qBAnDZ,EAAKL,MAAQ,CACTF,SAAU,GACVG,MAAM,IAJD,E,iEAWTkB,aAAaC,QACT,QACAT,KAAKE,UAAU/B,KAAKkB,MAAMC,U,+BA+CxB,IAAD,SAEoBnB,KAAKkB,MAFzB,EAEEC,MAFF,EAEQH,SACb,OACI,6BACI,kBAAC,EAAD,CAAOT,QAASP,KAAKO,QAASJ,MAAOH,KAAKkB,MAAMF,SAAUX,SAAUL,KAAKa,aAAcX,KAAM,SAAAqC,GAAG,OAAI,EAAKC,MAAMD,KAC/G,kBAAC,EAAD,CAAMjB,QAAStB,KAAKsB,QAASX,YAAaX,KAAKW,mB,GApExCH,IAAMC,WCsC7BgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.e1eeaa86.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Input extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input ref={this.props.refs} value={this.props.value} type='text' onChange={this.props.onChange}/>\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Input\r\n","import React from 'react'\r\n\r\nclass List extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>正在进行</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default List","import React from 'react'\r\nimport Input from './Input'\r\nimport List from './List'\r\n\r\nclass TodoList extends React.Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    //将添加的数据放入一个数组todos\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue ==\"\"){\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n    }//点击添加事件函数，给所有的值设一个t/f状态码\r\n    delTodo = (idx)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n    }//点击删除事件函数\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick={()=>this.delTodo(idx)}>\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        return (\r\n            <div>\r\n                <Input addTodo={this.addTodo} value={this.state.inpValue} onChange={this.handleChange} refs={inp => this.input=inp}/>\r\n                <List delTodo={this.delTodo} renderTodos={this.renderTodos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './pages/TodoList'\n//import Context from './pages/context';\n\n// import Home from './pages/Home';\n// import Demo from'./components/Demo';\n// import App from'./pages/App';\n//import Hoc,{Detail} from './pages/Hoc';\n//import Control from './components/Control'\n//import Hook from './pages/Hook'\n\n\n// alt shift + 上下键   复制一行\n// alt + 上下键         移动一行\n// 按住alt ，鼠标点击\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L\n// ReactDOM.render(\n//   <Control/>,\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(\n//   <Demo/>,\n//   document.getElementById('root')\n// );\n// ReactDOM.render(\n//   <App/>,\n//   document.getElementById('root')\n// )\n// ReactDOM.render(\n//   <div><Hoc/>\n//   <Detail/></div>,\n//   document.getElementById('root')\n// );\n// ReactDOM.render(\n//   <Context.Provider value=\"222\">\n//     <Hook />\n//   </Context.Provider>,\n//   document.getElementById('root')\n// )\nReactDOM.render(\n  <TodoList/>,\n  document.getElementById(\"root\")\n)\n\n// ReactDOM.render(\n//   <Home/>,\n//   document.getElementById('root')\n// );\n\n\n// let List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map(\n//         (item)=><li key={item.id}>{item.title}</li>\n//       )\n//     }\n//   </ul>\n// }\n\n// const Buttons = ()=>{\n//   const btns = [1,2,3,4,5];\n//   const handleClick = (num)=>{\n//     //第一个参数是事件对象\n//     console.log(num);\n//   }\n//   return <div>\n//     {\n//       btns.map((item)=>(<button key={item} onClick={()=>handleClick(item)}>{item}</button>)\n//       )\n//     }\n//   </div>\n// }\n\n// class Home extends React.Component{\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       data:[]\n//     }\n//   }\n//   componentDidMount(){\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n//   render(){\n//     const { data } = this.state;\n//     return <div>\n//       <Buttons />\n//       <List data={data}/>\n//     </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home data='abc'/>,\n//   document.getElementById('root')\n// );\n\n// 组件声明\n// 函数组件\n// UI（展示）组件，木偶组件\n// function App(props){\n//   const { title, id } = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n// // 智能组件\n// class Demo extends React.Component{\n//   constructor(){\n//      super();\n//     //  声明状态\n//      this.state = {\n//        name: new Date().toLocaleString()\n//      }\n//      setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//      },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n\n\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'react'\n// )\n\n// 将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     // 解构\n//     const { type,props } = eleObj;\n//     // 创建第一层节点\n//     let ele = document.createElement(type);\n//     // 遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n//       console.log(prop)\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//             const txtNode = document.createTextNode(props.children);\n//             ele.appendChild(txtNode);\n//             break;\n//         }\n//         // 将第一层节点对象的子元素添加进去\n//         props.children.forEach( child => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//     }\n\n//     // 将第一层DOM节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n\n\n\n\n\n  // 1、原生JS，DOM操作（jQ）\n  // 2、React：开发效率高、性能高\n  // 3、环境搭建、创建一个项目、运行\n  // 4、JSX语法"],"sourceRoot":""}